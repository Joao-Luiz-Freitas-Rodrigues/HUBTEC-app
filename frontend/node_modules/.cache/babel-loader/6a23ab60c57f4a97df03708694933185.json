{"ast":null,"code":"import { takeLatest, put, call, select } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { getUserId } from './selectors';\nconst base_url = 'http://localhost:3001'; //CONSULTA TODAS AS TASKS DE UM USUÁRIO ESPECÍFICO\n\nfunction getTasks(id) {\n  return axios({\n    method: 'GET',\n    url: \"\".concat(base_url, \"/tasks\"),\n    headers: {\n      user_id: id\n    }\n  });\n} //CONJUNTO DE FUNÇÕES PARA VALIDAÇÃO DE USUÁRIO\n\n\nfunction getUser(user) {\n  return axios({\n    method: 'POST',\n    url: \"\".concat(base_url, \"/authenticate\"),\n    data: {\n      email: user.email,\n      password: user.password\n    }\n  });\n}\n\nfunction* asyncLogIn(action) {\n  try {\n    const response = yield call(getUser, action.payload);\n    yield put({\n      type: 'LOG_IN',\n      payload: response.data\n    }); //PRÉ CARREGA A LISTA DE TASKS DO USUÁRIO\n\n    const task = yield call(getTasks, response.data._id);\n    console.log(task.data);\n    yield put({\n      type: 'TASK_LIST',\n      payload: task.data\n    });\n  } catch (e) {\n    const message = e.response.data.error;\n    yield put({\n      type: 'ERRO_LOGIN',\n      payload: message\n    }); //LIMPA A MENSAGEM DO TOAST\n\n    yield put({\n      type: 'CLEAR_MESSAGE'\n    });\n  }\n} //////////////// AÇÕES RELACIONADAS AS TASKS ///////////////\n//TASK ADD \n\n\nfunction addTask(task, user_id) {\n  return axios({\n    method: 'POST',\n    url: \"\".concat(base_url, \"/task\"),\n    headers: {\n      user_id\n    },\n    data: {\n      descricao: task.descricao,\n      data_entrega: task.data_entrega\n    }\n  });\n}\n\nfunction* asyncAddTask(action) {\n  try {\n    const user_id = yield select(getUserId);\n    const response = yield call(addTask, action.payload, user_id);\n    console.log(response);\n    yield put({\n      type: 'ADD_SUCESS',\n      payload: \"Task criada com sucesso!\"\n    });\n    const task = yield call(getTasks, user_id);\n    yield put({\n      type: 'TASK_LIST',\n      payload: task.data\n    });\n  } catch (e) {\n    console.log(e.response);\n  }\n} //TASK EDIT\n\n\nfunction editTask(task) {\n  return axios({\n    method: 'PUT',\n    url: \"\".concat(base_url, \"/update/\").concat(task.id),\n    data: {\n      descricao: task.descricao,\n      data_entrega: task.data_entrega\n    }\n  });\n}\n\nfunction* asyncTaskEdit(action) {\n  console.log(action);\n\n  try {\n    const response = yield call(editTask, action.payload);\n    console.log(response);\n    yield put({\n      type: 'EDIT_SUCESS',\n      payload: \"Task editada com sucesso!\"\n    });\n    const user_id = yield select(getUserId);\n    const task = yield call(getTasks, user_id);\n    yield put({\n      type: 'TASK_LIST',\n      payload: task.data\n    });\n  } catch (e) {\n    console.log(e.response);\n  }\n} //TASK DELETE\n\n\nfunction deleteTask(id) {\n  return axios({\n    method: 'PUT',\n    url: \"\".concat(base_url, \"/delete/\").concat(id)\n  });\n}\n\nfunction* asyncDeleteTask(action) {\n  try {\n    yield call(deleteTask, action.payload);\n    yield put({\n      type: 'DELETE_SUCESS'\n    });\n    const user_id = yield select(getUserId);\n    const task = yield call(getTasks, user_id);\n    yield put({\n      type: 'TASK_LIST',\n      payload: task.data\n    });\n  } catch (e) {\n    console.log(e.data);\n  }\n}\n\nexport default function* root() {\n  yield takeLatest('ASYNC_LOG_IN', asyncLogIn);\n  yield takeLatest('ASYNC_NEW_USER', asyncNewUser);\n  yield takeLatest('ASYNC_EDIT_TASK', asyncTaskEdit);\n  yield takeLatest('ASYNC_DELETE_TASK', asyncDeleteTask);\n  yield takeLatest('ASYNC_ADD_TASK', asyncAddTask);\n}","map":{"version":3,"sources":["/Users/mac/Documents/workspace/react/frontend/src/store/sagas.js"],"names":["takeLatest","put","call","select","axios","getUserId","base_url","getTasks","id","method","url","headers","user_id","getUser","user","data","email","password","asyncLogIn","action","response","payload","type","task","_id","console","log","e","message","error","addTask","descricao","data_entrega","asyncAddTask","editTask","asyncTaskEdit","deleteTask","asyncDeleteTask","root","asyncNewUser"],"mappings":"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","sourcesContent":["import { takeLatest, put, call, select } from 'redux-saga/effects'; \nimport axios from 'axios';\n\nimport { getUserId } from './selectors';\n\nconst base_url = 'http://localhost:3001'\n\n//CONSULTA TODAS AS TASKS DE UM USUÁRIO ESPECÍFICO\nfunction getTasks(id){\n    return axios({\n        method:'GET',\n        url:`${base_url}/tasks`,\n        headers:{\n            user_id:id\n        }\n    })\n}\n\n//CONJUNTO DE FUNÇÕES PARA VALIDAÇÃO DE USUÁRIO\nfunction getUser(user){\n    \n    return axios({\n        method: 'POST',\n        url:`${base_url}/authenticate`,\n        data:{\n            email:user.email,\n            password: user.password\n        }\n    })\n}\n\nfunction* asyncLogIn(action){\n\n    try{\n        const response = yield call(getUser, action.payload);        \n\n        yield put({ type: 'LOG_IN', payload: response.data});\n\n        \n        //PRÉ CARREGA A LISTA DE TASKS DO USUÁRIO\n        const task = yield call(getTasks, response.data._id);\n        console.log(task.data);\n        \n        yield put({type: 'TASK_LIST', payload: task.data});\n        \n    } catch(e){\n        const message = e.response.data.error;\n        yield put({type:'ERRO_LOGIN', payload: message});\n        //LIMPA A MENSAGEM DO TOAST\n        yield put({type:'CLEAR_MESSAGE'});\n    }\n    \n    \n}\n\n//////////////// AÇÕES RELACIONADAS AS TASKS ///////////////\n\n//TASK ADD \n\nfunction addTask(task, user_id){\n    return axios({\n        method:'POST',\n        url:`${base_url}/task`,\n        headers:{\n            user_id\n        },\n        data:{\n            descricao:task.descricao,\n            data_entrega:task.data_entrega\n        }\n    })\n}\n\nfunction* asyncAddTask(action){\n\n    try{\n        const user_id = yield select(getUserId);\n\n        const response = yield call(addTask, action.payload, user_id);\n        console.log(response);\n        \n        yield put({ type:'ADD_SUCESS', payload:\"Task criada com sucesso!\"});\n\n        \n        const task = yield call(getTasks, user_id );\n        \n        yield put({type: 'TASK_LIST', payload: task.data});\n    }catch(e){\n        console.log(e.response);\n        \n    }\n}\n\n//TASK EDIT\nfunction editTask(task){\n    return axios({\n        method:'PUT',\n        url:`${base_url}/update/${task.id}`,\n        data:{\n            descricao:task.descricao,\n            data_entrega: task.data_entrega\n        }\n    })\n}\n\nfunction* asyncTaskEdit(action){\n    console.log(action);\n    \n    try{\n        const response = yield call(editTask, action.payload);\n        console.log(response);\n        \n        yield put({ type:'EDIT_SUCESS', payload:\"Task editada com sucesso!\"});\n        \n        const user_id = yield select(getUserId);\n        \n        const task = yield call(getTasks, user_id );\n        \n        yield put({type: 'TASK_LIST', payload: task.data});\n        \n    }catch(e){\n        console.log(e.response);\n        \n    }\n}\n\n//TASK DELETE\nfunction deleteTask(id){\n    return axios({\n        method:'PUT',\n        url:`${base_url}/delete/${id}`\n    })\n}\nfunction* asyncDeleteTask(action){\n    \n    try{\n        \n        yield call(deleteTask, action.payload);\n        \n        yield put({ type:'DELETE_SUCESS'})\n\n        const user_id = yield select(getUserId);\n        \n        const task = yield call(getTasks, user_id );\n        yield put({type: 'TASK_LIST', payload: task.data});\n\n    }catch(e){\n        console.log(e.data);\n        \n    }\n}\n\nexport default function* root(){ \n    \n    yield takeLatest('ASYNC_LOG_IN', asyncLogIn)\n    yield takeLatest('ASYNC_NEW_USER', asyncNewUser)\n\n    yield takeLatest('ASYNC_EDIT_TASK', asyncTaskEdit)\n    yield takeLatest('ASYNC_DELETE_TASK', asyncDeleteTask)\n    yield takeLatest('ASYNC_ADD_TASK', asyncAddTask)\n    \n}\n"]},"metadata":{},"sourceType":"module"}